//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssetManagement.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectManagementEntities : DbContext
    {
        public ProjectManagementEntities()
            : base("name=ProjectManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssetDetail> AssetDetails { get; set; }
        public virtual DbSet<Competency_Analysis> Competency_Analysis { get; set; }
        public virtual DbSet<CompetencyCategory> CompetencyCategories { get; set; }
        public virtual DbSet<CompetencyLevel> CompetencyLevels { get; set; }
        public virtual DbSet<CompetencyMatrix> CompetencyMatrices { get; set; }
        public virtual DbSet<CompetencyQuestion> CompetencyQuestions { get; set; }
        public virtual DbSet<CompetencySubCategory> CompetencySubCategories { get; set; }
        public virtual DbSet<FeatureCycle> FeatureCycles { get; set; }
        public virtual DbSet<ProjectAssetDetail> ProjectAssetDetails { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<UserBaseValue> UserBaseValues { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Version> Versions { get; set; }
        public virtual DbSet<View_UserCompetency> View_UserCompetency { get; set; }
        public virtual DbSet<UserCompetency> UserCompetencies { get; set; }
        public virtual DbSet<View_GetUserCompetency> View_GetUserCompetency { get; set; }
        public virtual DbSet<View_CheckCompetecncy> View_CheckCompetecncy { get; set; }
        public virtual DbSet<View_Check_Competency_New> View_Check_Competency_New { get; set; }
        public virtual DbSet<CompetencySubQuestion> CompetencySubQuestions { get; set; }
    
        public virtual ObjectResult<SP_ExpiredNotification_Result> SP_ExpiredNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExpiredNotification_Result>("SP_ExpiredNotification");
        }
    
        public virtual ObjectResult<SP_GETCOMPETENCY_Result> SP_GETCOMPETENCY(Nullable<int> uSERID)
        {
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETCOMPETENCY_Result>("SP_GETCOMPETENCY", uSERIDParameter);
        }
    
        public virtual ObjectResult<SP_GETCOMPETENCY_QUESTIONS_Result> SP_GETCOMPETENCY_QUESTIONS(Nullable<int> projectID, Nullable<int> caseId, Nullable<int> userID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var caseIdParameter = caseId.HasValue ?
                new ObjectParameter("CaseId", caseId) :
                new ObjectParameter("CaseId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETCOMPETENCY_QUESTIONS_Result>("SP_GETCOMPETENCY_QUESTIONS", projectIDParameter, caseIdParameter, userIDParameter);
        }
    
        public virtual int Sp_ImportUsers(Nullable<int> roleID, string userName, string displayName, string email, string scrumTeam, string gripLevel, Nullable<System.DateTime> joining_Date, string designation, Nullable<int> project_ID, Nullable<System.DateTime> modified_date, string modified_By)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var scrumTeamParameter = scrumTeam != null ?
                new ObjectParameter("ScrumTeam", scrumTeam) :
                new ObjectParameter("ScrumTeam", typeof(string));
    
            var gripLevelParameter = gripLevel != null ?
                new ObjectParameter("GripLevel", gripLevel) :
                new ObjectParameter("GripLevel", typeof(string));
    
            var joining_DateParameter = joining_Date.HasValue ?
                new ObjectParameter("Joining_Date", joining_Date) :
                new ObjectParameter("Joining_Date", typeof(System.DateTime));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var project_IDParameter = project_ID.HasValue ?
                new ObjectParameter("Project_ID", project_ID) :
                new ObjectParameter("Project_ID", typeof(int));
    
            var modified_dateParameter = modified_date.HasValue ?
                new ObjectParameter("Modified_date", modified_date) :
                new ObjectParameter("Modified_date", typeof(System.DateTime));
    
            var modified_ByParameter = modified_By != null ?
                new ObjectParameter("Modified_By", modified_By) :
                new ObjectParameter("Modified_By", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ImportUsers", roleIDParameter, userNameParameter, displayNameParameter, emailParameter, scrumTeamParameter, gripLevelParameter, joining_DateParameter, designationParameter, project_IDParameter, modified_dateParameter, modified_ByParameter);
        }
    
        public virtual int SP_TransferAssets(Nullable<int> userID, string userName, Nullable<int> projectID, string type, string manufacturer, string resources_Class, string serial_No, string hostName, string spiridonNo, string location, string pRNO, string pONO, string warrantyStartDate, string ageOfAsset, string expireBy, string owner, string rAM, string storage, string processor, string cPUClockSpeed, string physicalCores, string nIC_Count)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var resources_ClassParameter = resources_Class != null ?
                new ObjectParameter("Resources_Class", resources_Class) :
                new ObjectParameter("Resources_Class", typeof(string));
    
            var serial_NoParameter = serial_No != null ?
                new ObjectParameter("Serial_No", serial_No) :
                new ObjectParameter("Serial_No", typeof(string));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var spiridonNoParameter = spiridonNo != null ?
                new ObjectParameter("SpiridonNo", spiridonNo) :
                new ObjectParameter("SpiridonNo", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var pRNOParameter = pRNO != null ?
                new ObjectParameter("PRNO", pRNO) :
                new ObjectParameter("PRNO", typeof(string));
    
            var pONOParameter = pONO != null ?
                new ObjectParameter("PONO", pONO) :
                new ObjectParameter("PONO", typeof(string));
    
            var warrantyStartDateParameter = warrantyStartDate != null ?
                new ObjectParameter("WarrantyStartDate", warrantyStartDate) :
                new ObjectParameter("WarrantyStartDate", typeof(string));
    
            var ageOfAssetParameter = ageOfAsset != null ?
                new ObjectParameter("AgeOfAsset", ageOfAsset) :
                new ObjectParameter("AgeOfAsset", typeof(string));
    
            var expireByParameter = expireBy != null ?
                new ObjectParameter("ExpireBy", expireBy) :
                new ObjectParameter("ExpireBy", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var rAMParameter = rAM != null ?
                new ObjectParameter("RAM", rAM) :
                new ObjectParameter("RAM", typeof(string));
    
            var storageParameter = storage != null ?
                new ObjectParameter("Storage", storage) :
                new ObjectParameter("Storage", typeof(string));
    
            var processorParameter = processor != null ?
                new ObjectParameter("Processor", processor) :
                new ObjectParameter("Processor", typeof(string));
    
            var cPUClockSpeedParameter = cPUClockSpeed != null ?
                new ObjectParameter("CPUClockSpeed", cPUClockSpeed) :
                new ObjectParameter("CPUClockSpeed", typeof(string));
    
            var physicalCoresParameter = physicalCores != null ?
                new ObjectParameter("PhysicalCores", physicalCores) :
                new ObjectParameter("PhysicalCores", typeof(string));
    
            var nIC_CountParameter = nIC_Count != null ?
                new ObjectParameter("NIC_Count", nIC_Count) :
                new ObjectParameter("NIC_Count", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TransferAssets", userIDParameter, userNameParameter, projectIDParameter, typeParameter, manufacturerParameter, resources_ClassParameter, serial_NoParameter, hostNameParameter, spiridonNoParameter, locationParameter, pRNOParameter, pONOParameter, warrantyStartDateParameter, ageOfAssetParameter, expireByParameter, ownerParameter, rAMParameter, storageParameter, processorParameter, cPUClockSpeedParameter, physicalCoresParameter, nIC_CountParameter);
        }
    
        public virtual int SP_TransferProjectAssets(Nullable<int> userID, string userName, Nullable<int> projectID, string type, string manufacturer, string resources_Class, string serial_No, string hostName, string spiridonNo, string location, string pRNO, string pONO, string warrantyStartDate, string ageOfAsset, string expireBy, string owner, string rAM, string storage, string processor, string cPUClockSpeed, string physicalCores, string nIC_Count, string modifiedBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var resources_ClassParameter = resources_Class != null ?
                new ObjectParameter("Resources_Class", resources_Class) :
                new ObjectParameter("Resources_Class", typeof(string));
    
            var serial_NoParameter = serial_No != null ?
                new ObjectParameter("Serial_No", serial_No) :
                new ObjectParameter("Serial_No", typeof(string));
    
            var hostNameParameter = hostName != null ?
                new ObjectParameter("HostName", hostName) :
                new ObjectParameter("HostName", typeof(string));
    
            var spiridonNoParameter = spiridonNo != null ?
                new ObjectParameter("SpiridonNo", spiridonNo) :
                new ObjectParameter("SpiridonNo", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var pRNOParameter = pRNO != null ?
                new ObjectParameter("PRNO", pRNO) :
                new ObjectParameter("PRNO", typeof(string));
    
            var pONOParameter = pONO != null ?
                new ObjectParameter("PONO", pONO) :
                new ObjectParameter("PONO", typeof(string));
    
            var warrantyStartDateParameter = warrantyStartDate != null ?
                new ObjectParameter("WarrantyStartDate", warrantyStartDate) :
                new ObjectParameter("WarrantyStartDate", typeof(string));
    
            var ageOfAssetParameter = ageOfAsset != null ?
                new ObjectParameter("AgeOfAsset", ageOfAsset) :
                new ObjectParameter("AgeOfAsset", typeof(string));
    
            var expireByParameter = expireBy != null ?
                new ObjectParameter("ExpireBy", expireBy) :
                new ObjectParameter("ExpireBy", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("Owner", owner) :
                new ObjectParameter("Owner", typeof(string));
    
            var rAMParameter = rAM != null ?
                new ObjectParameter("RAM", rAM) :
                new ObjectParameter("RAM", typeof(string));
    
            var storageParameter = storage != null ?
                new ObjectParameter("Storage", storage) :
                new ObjectParameter("Storage", typeof(string));
    
            var processorParameter = processor != null ?
                new ObjectParameter("Processor", processor) :
                new ObjectParameter("Processor", typeof(string));
    
            var cPUClockSpeedParameter = cPUClockSpeed != null ?
                new ObjectParameter("CPUClockSpeed", cPUClockSpeed) :
                new ObjectParameter("CPUClockSpeed", typeof(string));
    
            var physicalCoresParameter = physicalCores != null ?
                new ObjectParameter("PhysicalCores", physicalCores) :
                new ObjectParameter("PhysicalCores", typeof(string));
    
            var nIC_CountParameter = nIC_Count != null ?
                new ObjectParameter("NIC_Count", nIC_Count) :
                new ObjectParameter("NIC_Count", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TransferProjectAssets", userIDParameter, userNameParameter, projectIDParameter, typeParameter, manufacturerParameter, resources_ClassParameter, serial_NoParameter, hostNameParameter, spiridonNoParameter, locationParameter, pRNOParameter, pONOParameter, warrantyStartDateParameter, ageOfAssetParameter, expireByParameter, ownerParameter, rAMParameter, storageParameter, processorParameter, cPUClockSpeedParameter, physicalCoresParameter, nIC_CountParameter, modifiedByParameter);
        }
    }
}
